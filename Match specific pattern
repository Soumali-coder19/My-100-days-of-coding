Given a dictionary of words and a pattern. Every character in the pattern is uniquely mapped to a character in the dictionary. Find all such words in the dictionary that match the given pattern. 

Example 1:

Input:
N = 4
dict[] = {abb,abc,xyz,xyy}
pattern  = foo
Output: abb xyy
Explanation: xyy and abb have the same
character at index 1 and 2 like the
pattern.
Your Task:
You don't need to read input or print anything. Your task is to complete the function findMatchedWords() which takes an array of strings dict[] consisting of the words in the dictionary and a string, Pattern and returns an array of strings consisting of all the words in the dict[] that match the given Pattern in lexicographical order.

Expected Time Complexity: O(N*K) (where K is the length of the pattern).
Expected Auxiliary Space: O(N).

Constraints:
1 <= N <= 10

@SoumaliMukhopadhyay
#py 3 solution

def findSpecificPattern(Dict, pattern):
    #Code here
    dict2={}
    pat2=[]
    ans=[]
    for l in pattern:
        if l not in dict2:
            dict2[l]=1
        else:
            dict2[l]+=1
    for value in dict2.values():
        pat2.append(value)
    pat2.sort()    
    for i in Dict:
        pat1=[]
        dict1={}
        for j in i:
            if j not in dict1:
                dict1[j]=1
            else:
                dict1[j]+=1
        for value in dict1.values():
            pat1.append(value)
        pat1.sort()
        if pat1==pat2:
            ans.append(i)
    return(ans)
